import java.util.Arrays;

public class SimpleMergeSort {
    public static void mergeSort(int[] arr) {
        if (arr.length < 2) return;

        int mid = arr.length / 2;
        int[] left = Arrays.copyOfRange(arr, 0, mid);
        int[] right = Arrays.copyOfRange(arr, mid, arr.length);

        mergeSort(left);
        mergeSort(right);
        merge(arr, left, right);
    }

    public static void merge(int[] arr, int[] left, int[] right) {
        int i = 0, j = 0, k = 0;

        while (i < left.length && j < right.length)
            arr[k++] = (left[i] < right[j]) ? left[i++] : right[j++];

        while (i < left.length)
            arr[k++] = left[i++];

        while (j < right.length)
            arr[k++] = right[j++];
    }

    public static void main(String[] args) {
        int[] arr = { 5, 2, 4, 6, 1, 3 };

        System.out.println("Before Sorting: " + Arrays.toString(arr));

        mergeSort(arr);

        System.out.println("After Sorting: " + Arrays.toString(arr));
    }
}

output:
Before Sorting: [5, 2, 4, 6, 1, 3]
After Sorting: [1, 2, 3, 4, 5, 6]
