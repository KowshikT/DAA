public class HamiltonianCycle {
    final int V = 5;
    int[] path;

    // Function to check if the current vertex can be added to the path
    boolean isSafe(int v, int[][] graph, int[] path, int pos) {
        // Check if current vertex is adjacent to the previous vertex
        if (graph[path[pos - 1]][v] == 0)
            return false;

        // Check if the vertex is already included in the path
        for (int i = 0; i < pos; i++)
            if (path[i] == v)
                return false;

        return true;
    }

    // Recursive function to solve the Hamiltonian cycle problem
    boolean hamCycleUtil(int[][] graph, int pos) {
        if (pos == V) {
            // Check if there is a return edge to starting vertex
            return graph[path[pos - 1]][path[0]] == 1;
        }

        // Try different vertices as next candidate
        for (int v = 1; v < V; v++) {
            if (isSafe(v, graph, path, pos)) {
                path[pos] = v;
                if (hamCycleUtil(graph, pos + 1))
                    return true;
                path[pos] = -1; // backtrack
            }
        }
        return false;
    }

    // Solves the problem
    void hamCycle(int[][] graph) {
        path = new int[V];
        for (int i = 0; i < V; i++)
            path[i] = -1;

        path[0] = 0; // Start at vertex 0

        if (!hamCycleUtil(graph, 1)) {
            System.out.println("No Hamiltonian Cycle exists");
            return;
        }

        printSolution(path);
    }

    void printSolution(int[] path) {
        System.out.print("Hamiltonian Cycle: ");
        for (int i = 0; i < V; i++)
            System.out.print(path[i] + " ");
        System.out.println(path[0]); // return to start
    }

    public static void main(String[] args) {
        HamiltonianCycle hc = new HamiltonianCycle();
        int[][] graph = {
            {0, 1, 0, 1, 0},
            {1, 0, 1, 1, 1},
            {0, 1, 0, 0, 1},
            {1, 1, 0, 0, 1},
            {0, 1, 1, 1, 0}
        };

        hc.hamCycle(graph);
    }
}


output:
Hamiltonian Cycle: 0 1 2 4 3 0
