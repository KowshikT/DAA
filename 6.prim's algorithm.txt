public class PrimsAlgorithm {

    // Function to find the vertex with minimum key value
    int minKey(int[] key, boolean[] mstSet, int V) {
        int min = Integer.MAX_VALUE, minIndex = -1;

        for (int v = 0; v < V; v++) {
            if (!mstSet[v] && key[v] < min) {
                min = key[v];
                minIndex = v;
            }
        }
        return minIndex;
    }

    // Function to print the constructed MST
    void printMST(int[] parent, int[][] graph, int V) {
        int totalWeight = 0;
        System.out.println("Edge \tWeight");
        for (int i = 1; i < V; i++) {
            System.out.println(parent[i] + " - " + i + "\t" + graph[i][parent[i]]);
            totalWeight += graph[i][parent[i]];
        }
        System.out.println("Total weight of MST = " + totalWeight);
    }

    // Prim's Algorithm
    void primMST(int[][] graph, int V) {
        int[] parent = new int[V]; // Store MST
        int[] key = new int[V];    // Key values
        boolean[] mstSet = new boolean[V]; // Included in MST

        // Initialize all keys as infinite
        for (int i = 0; i < V; i++) {
            key[i] = Integer.MAX_VALUE;
            mstSet[i] = false;
        }

        key[0] = 0;      // Start from first vertex
        parent[0] = -1;  // First node is always root of MST

        for (int count = 0; count < V - 1; count++) {
            int u = minKey(key, mstSet, V);
            mstSet[u] = true;

            for (int v = 0; v < V; v++) {
                if (graph[u][v] != 0 && !mstSet[v] && graph[u][v] < key[v]) {
                    parent[v] = u;
                    key[v] = graph[u][v];
                }
            }
        }

        printMST(parent, graph, V);
    }

    // Main method
    public static void main(String[] args) {
        PrimsAlgorithm prim = new PrimsAlgorithm();
        int V = 5;
        int[][] graph = {
            {0, 2, 0, 6, 0},
            {2, 0, 3, 8, 5},
            {0, 3, 0, 0, 7},
            {6, 8, 0, 0, 9},
            {0, 5, 7, 9, 0}
        };

        prim.primMST(graph, V);
    }
}


output:
Edge     Weight
0 - 1    2
1 - 2    3
0 - 3    6
1 - 4    5
Total weight of MST = 16
