public class TSP {
    final static int INF = 999999;
    int[][] dp;
    int[][] dist;
    int N;

    public TSP(int[][] graph) {
        this.N = graph.length;
        this.dist = graph;
        this.dp = new int[1 << N][N];

        // Initialize dp table with -1
        for (int i = 0; i < (1 << N); i++)
            for (int j = 0; j < N; j++)
                dp[i][j] = -1;
    }

    // Solve TSP starting from city 0 with visited set containing only city 0
    int tsp(int mask, int pos) {
        if (mask == (1 << N) - 1) {
            return dist[pos][0]; // return to starting point
        }

        if (dp[mask][pos] != -1)
            return dp[mask][pos];

        int minCost = INF;
        for (int city = 0; city < N; city++) {
            if ((mask & (1 << city)) == 0) {
                int newCost = dist[pos][city] + tsp(mask | (1 << city), city);
                minCost = Math.min(minCost, newCost);
            }
        }

        return dp[mask][pos] = minCost;
    }

    public static void main(String[] args) {
        int[][] graph = {
            {0, 10, 15, 20},
            {10, 0, 35, 25},
            {15, 35, 0, 30},
            {20, 25, 30, 0}
        };

        TSP tspSolver = new TSP(graph);
        int minCost = tspSolver.tsp(1, 0); // starting at city 0
        System.out.println("Minimum cost of TSP tour: " + minCost);
    }
}

output:

Minimum cost of TSP tour: 80
