public class QuickSort {

    // Method to perform QuickSort
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            // Partition the array and get the pivot index
            int pivotIndex = partition(arr, low, high);

            // Recursively sort elements before and after partition
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }

    // Method to partition the array
    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];  // Choose last element as pivot
        int i = low - 1;         // Index of smaller element

        for (int j = low; j < high; j++) {
            // If current element is smaller than or equal to pivot
            if (arr[j] <= pivot) {
                i++;
                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap arr[i+1] and pivot (arr[high])
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }

    // Main method to test the QuickSort
    public static void main(String[] args) {
        int[] arr = { 24, 9, 29, 14, 19, 27 };

        System.out.println("Before Sorting:");
        for (int num : arr)
            System.out.print(num + " ");

        quickSort(arr, 0, arr.length - 1);

        System.out.println("\n\nAfter Sorting:");
        for (int num : arr)
            System.out.print(num + " ");
    }
}


output:
Before Sorting:
24 9 29 14 19 27 

After Sorting:
9 14 19 24 27 29
