public class WarshallAlgorithm {

    // Function to compute transitive closure using Warshall's Algorithm
    public static void warshall(int[][] graph, int V) {
        int[][] reach = new int[V][V];

        // Initialize reachability matrix
        for (int i = 0; i < V; i++)
            for (int j = 0; j < V; j++)
                reach[i][j] = graph[i][j];

        // Warshall's Algorithm
        for (int k = 0; k < V; k++) {
            for (int i = 0; i < V; i++) {
                for (int j = 0; j < V; j++) {
                    reach[i][j] = (reach[i][j] != 0) || (reach[i][k] != 0 && reach[k][j] != 0) ? 1 : 0;
                }
            }
        }

        // Print the transitive closure
        System.out.println("Transitive closure matrix:");
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                System.out.print(reach[i][j] + " ");
            }
            System.out.println();
        }
    }

    // Main method
    public static void main(String[] args) {
        int[][] graph = {
            {1, 1, 0, 0},
            {0, 1, 1, 0},
            {0, 0, 1, 1},
            {0, 0, 0, 1}
        };

        warshall(graph, 4);
    }
}

outptu:
Transitive closure matrix:
1 1 1 1 
0 1 1 1 
0 0 1 1 
0 0 0 1
