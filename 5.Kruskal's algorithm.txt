import java.util.*;

class Edge implements Comparable<Edge> {
    int src, dest, weight;

    public int compareTo(Edge compareEdge) {
        return this.weight - compareEdge.weight;
    }
}

public class Kruskal {
    int V;  // Number of vertices
    ArrayList<Edge> edges = new ArrayList<>();

    Kruskal(int v) {
        V = v;
    }

    void addEdge(int src, int dest, int weight) {
        Edge e = new Edge();
        e.src = src;
        e.dest = dest;
        e.weight = weight;
        edges.add(e);
    }

    // Find the set of an element (with path compression)
    int find(int[] parent, int i) {
        if (parent[i] == i)
            return i;
        return parent[i] = find(parent, parent[i]);
    }

    // Union of two sets by rank
    void union(int[] parent, int[] rank, int x, int y) {
        int xroot = find(parent, x);
        int yroot = find(parent, y);

        if (rank[xroot] < rank[yroot])
            parent[xroot] = yroot;
        else if (rank[xroot] > rank[yroot])
            parent[yroot] = xroot;
        else {
            parent[yroot] = xroot;
            rank[xroot]++;
        }
    }

    void kruskalMST() {
        ArrayList<Edge> result = new ArrayList<>();
        Collections.sort(edges); // Sort edges by weight

        int[] parent = new int[V];
        int[] rank = new int[V];

        // Initially each vertex is in its own set
        for (int i = 0; i < V; i++) {
            parent[i] = i;
            rank[i] = 0;
        }

        for (Edge edge : edges) {
            int x = find(parent, edge.src);
            int y = find(parent, edge.dest);

            // If including this edge doesn't cause a cycle
            if (x != y) {
                result.add(edge);
                union(parent, rank, x, y);
            }
        }

        System.out.println("Edges in the Minimum Spanning Tree:");
        int totalWeight = 0;
        for (Edge e : result) {
            System.out.println(e.src + " -- " + e.dest + " == " + e.weight);
            totalWeight += e.weight;
        }
        System.out.println("Total weight of MST = " + totalWeight);
    }

    // Main method to test
    public static void main(String[] args) {
        Kruskal graph = new Kruskal(4);

        graph.addEdge(0, 1, 10);
        graph.addEdge(0, 2, 6);
        graph.addEdge(0, 3, 5);
        graph.addEdge(1, 3, 15);
        graph.addEdge(2, 3, 4);

        graph.kruskalMST();
    }
}

output:
Edges in the Minimum Spanning Tree:
2 -- 3 == 4
0 -- 3 == 5
0 -- 1 == 10
Total weight of MST = 19
